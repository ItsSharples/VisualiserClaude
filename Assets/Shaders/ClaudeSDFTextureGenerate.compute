#pragma kernel CSMain

#include "Assets/Scripts/Compute Common/GeoMath.hlsl"

struct Boundary {
	uint index;
	uint elevationIndex;
	float longitude;
	float latitude;

	float u;
	float v;
};

struct Pixel {
	float latitude;
	float longitude;
	float index;

	float groundTemp;
};

RWTexture2D<float4> OutTexture;
/// Lat, Long, Index, GndTmp
StructuredBuffer<Pixel> Pixels;
StructuredBuffer<Boundary> Boundaries;

const uint pixel_count;
const uint boundary_count;

const uint width = 360;
const uint height = 181;

static const float defaultDistance = 100000.0f;
static const float halfPI = PI / 2.0f;

static const float sphereRadius = 16.0f;
static const float pointDistance = 0.031250f;

float geodesicDistance(float3 a, float3 b) {
	return atan(length(cross(a, b)) / dot(a, b));
}


[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	if ((uint)id.x >= width || (uint)id.y >= height) { return; }

	int x = (id.x + width / 2) % width;
	int y = height - 1 - id.y;
	int i = y * width + x;

	float2 xy = float2(id.x, id.y);
	//float pixel_lat_rad = radians(adjusted_latitude);
	float2 uv = xy / float2(width, height);

	float3 pixelLongLat = float3(uvToLongitudeLatitude(uv), sphereRadius);
	//float3 pixelLongLatTmp = pixelLongLat;
	float3 pixelPoint = uvToPointOnSphere(uv);

	float minDistance = defaultDistance;
	float currIndex = -1;
	
	float3 currDist = float3(defaultDistance, defaultDistance, -1);

	uint point_index;
	float atPointIndex = 0;
	float atPoint = 0;
	[loop]
	for (point_index = 0; point_index < pixel_count; point_index++) {
		Pixel pointVector = Pixels[point_index];
		float latitude = pointVector.latitude;
		float longitude = pointVector.longitude;

		
		//float3 pointLongLat = float3(longitude, latitude , sphereRadius);
		float3 pointPoint = longitudeLatitudeToPoint(float2(longitude, latitude - halfPI));

		float dist = distanceBetweenPointsOnUnitSphere(pixelPoint, pointPoint);

		if (dist < minDistance) {
			minDistance = dist;
			currIndex = point_index;
			//atPointIndex = gndTmp;
		}
		continue;
	}
	Pixel closestPixel = Pixels[currIndex];
	OutTexture[xy] = float4(closestPixel.index, closestPixel.groundTemp, closestPixel.longitude, closestPixel.latitude);
}
